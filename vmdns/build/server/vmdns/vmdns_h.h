/* Generated by IDL compiler version FreeDCE 1.1.0.7 with GNU Flex/Bison */
#ifndef vmdns_v1_0_included
#define vmdns_v1_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif
#include <dce/rpc.h>

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif

#include <lw/types.h>

#if 0
typedef idl_ushort_int wchar16_t;
typedef idl_usmall_int LW_UINT8;
typedef LW_UINT8 *LW_PUINT8;
typedef idl_ushort_int LW_UINT16;
typedef LW_UINT16 *LW_PUINT16;
typedef idl_ulong_int LW_UINT32;
typedef LW_UINT32 *LW_PUINT32;
typedef idl_uhyper_int LW_UINT64;
typedef LW_UINT64 *LW_PUINT64;
typedef idl_small_int LW_INT8;
typedef LW_INT8 *LW_PINT8;
typedef idl_short_int LW_INT16;
typedef LW_INT16 *LW_PINT16;
typedef idl_long_int LW_INT32;
typedef LW_INT32 *LW_PINT32;
typedef idl_hyper_int LW_INT64;
typedef LW_INT64 *LW_PINT64;
typedef void LW_VOID;
typedef idl_void_p_t LW_PVOID;
typedef idl_void_p_t LW_PCVOID;
typedef LW_UINT8 LW_BOOLEAN;
typedef LW_BOOLEAN *LW_PBOOLEAN;
typedef LW_UINT8 LW_BYTE;
typedef LW_BYTE *LW_PBYTE;
typedef idl_char LW_CHAR;
typedef LW_CHAR *LW_PCHAR;
typedef LW_UINT8 LW_UCHAR;
typedef LW_UCHAR *LW_PUCHAR;
typedef wchar16_t LW_WCHAR;
typedef LW_WCHAR *LW_PWCHAR;
typedef LW_INT16 LW_SHORT;
typedef LW_SHORT *LW_PSHORT;
typedef LW_UINT16 LW_USHORT;
typedef LW_USHORT *LW_PUSHORT;
typedef LW_INT32 LW_LONG;
typedef LW_LONG *LW_PLONG;
typedef LW_UINT32 LW_ULONG;
typedef LW_ULONG *LW_PULONG;
typedef LW_INT64 LW_LONG64;
typedef LW_LONG64 *LW_PLONG64;
typedef LW_UINT64 LW_ULONG64;
typedef LW_ULONG64 *LW_PULONG64;
typedef idl_char *LW_PSTR;
typedef idl_char *LW_PCSTR;
typedef wchar16_t *LW_PWSTR;
typedef wchar16_t *LW_PCWSTR;
typedef LW_UINT32 LW_BOOL;
typedef LW_BOOL *LW_PBOOL;
typedef LW_UINT16 LW_WORD;
typedef LW_WORD *LW_PWORD;
typedef LW_UINT32 LW_DWORD;
typedef LW_DWORD *LW_PDWORD;
typedef LW_DWORD LW_WINERROR;
typedef LW_WINERROR *LW_PWINERROR;
typedef LW_LONG LW_NTSTATUS;
typedef LW_NTSTATUS *LW_PNTSTATUS;
typedef LW_CHAR LW_TCHAR;
typedef struct _LW_GUID {
LW_ULONG Data1;
LW_USHORT Data2;
LW_USHORT Data3;
LW_BYTE Data4[8];
} LW_GUID;
typedef LW_GUID *LW_PGUID;
typedef struct _LW_LUID {
LW_ULONG LowPart;
LW_LONG HighPart;
} LW_LUID;
typedef LW_LUID *LW_PLUID;
typedef LW_UINT8 UINT8;
typedef LW_PUINT8 PUINT8;
typedef LW_UINT16 UINT16;
typedef LW_PUINT16 PUINT16;
typedef LW_UINT32 UINT32;
typedef LW_PUINT32 PUINT32;
typedef LW_UINT64 UINT64;
typedef LW_PUINT64 PUINT64;
typedef LW_INT8 INT8;
typedef LW_PINT8 PINT8;
typedef LW_INT16 INT16;
typedef LW_PINT16 PINT16;
typedef LW_INT32 INT32;
typedef LW_PINT32 PINT32;
typedef LW_INT64 INT64;
typedef LW_PINT64 PINT64;
typedef LW_VOID VOID;
typedef LW_PVOID PVOID;
typedef LW_PCVOID PCVOID;
typedef LW_BOOLEAN BOOLEAN;
typedef LW_PBOOLEAN PBOOLEAN;
typedef LW_BYTE BYTE;
typedef LW_PBYTE PBYTE;
typedef LW_CHAR CHAR;
typedef LW_WCHAR WCHAR;
typedef LW_PCHAR PCHAR;
typedef LW_PWCHAR PWCHAR;
typedef LW_UCHAR UCHAR;
typedef LW_PUCHAR PUCHAR;
typedef LW_SHORT SHORT;
typedef LW_PSHORT PSHORT;
typedef LW_USHORT USHORT;
typedef LW_PUSHORT PUSHORT;
typedef LW_LONG LONG;
typedef LW_PLONG PLONG;
typedef LW_ULONG ULONG;
typedef LW_PULONG PULONG;
typedef LW_LONG64 LONG64;
typedef LW_PLONG64 PLONG64;
typedef LW_ULONG64 ULONG64;
typedef LW_PULONG64 PULONG64;
typedef LW_PSTR PSTR;
typedef LW_PCSTR PCSTR;
typedef LW_PWSTR PWSTR;
typedef LW_PCWSTR PCWSTR;
typedef LW_BOOL BOOL;
typedef LW_PBOOL PBOOL;
typedef LW_WORD WORD;
typedef LW_PWORD PWORD;
typedef LW_DWORD DWORD;
typedef LW_PDWORD PDWORD;
typedef LW_WINERROR WINERROR;
typedef LW_PWINERROR PWINERROR;
typedef LW_NTSTATUS NTSTATUS;
typedef LW_PNTSTATUS PNTSTATUS;
typedef LW_TCHAR TCHAR;
typedef LW_GUID GUID;
typedef LW_PGUID PGUID;
typedef LW_LUID LUID;
typedef LW_PLUID PLUID;
typedef struct _LW_UNICODE_STRING {
LW_USHORT Length;
LW_USHORT MaximumLength;
LW_PWCHAR Buffer;
} LW_UNICODE_STRING;
typedef LW_UNICODE_STRING *LW_PUNICODE_STRING;
typedef struct _LW_ANSI_STRING {
LW_USHORT Length;
LW_USHORT MaximumLength;
LW_PCHAR Buffer;
} LW_ANSI_STRING;
typedef LW_ANSI_STRING *LW_PANSI_STRING;
typedef LW_UNICODE_STRING UNICODE_STRING;
typedef LW_PUNICODE_STRING PUNICODE_STRING;
typedef LW_ANSI_STRING ANSI_STRING;
typedef LW_PANSI_STRING PANSI_STRING;

#endif

#include <vmdnstypes.h>

#if 0
typedef idl_char *PDNS_STRING;
typedef idl_ushort_int *PWDNS_STRING;
typedef UINT16 VMDNS_RR_TYPE;
typedef UINT16 VMDNS_CLASS;
typedef INT32 VMDNS_TTL;
typedef UINT16 VMDNS_RDLENGTH;
typedef DWORD VMDNS_IP4_ADDRESS;
typedef DWORD VMDNS_ZONE_FLAGS;
typedef DWORD VMDNS_ZONE_TYPE;
typedef UINT16 VMDNS_SERVICE_TYPE;
typedef UINT16 VMDNS_SERVICE_PROTOCOL;
typedef struct _VMDNS_BLOB {
UINT16 unSize;
PBYTE pData;
} VMDNS_BLOB;
typedef VMDNS_BLOB *PVMDNS_BLOB;
typedef struct _VMDNS_IP6_ADDRESS {
BYTE IP6Byte[16];
} VMDNS_IP6_ADDRESS;
typedef VMDNS_IP6_ADDRESS *PVMDNS_IP6_ADDRESS;
typedef struct _VMDNS_A_DATA {
VMDNS_IP4_ADDRESS IpAddress;
} VMDNS_A_DATA;
typedef VMDNS_A_DATA *PVMDNS_A_DATA;
typedef struct _VMDNS_PTR_DATAW {
PWDNS_STRING pNameHost;
} VMDNS_PTR_DATAW;
typedef VMDNS_PTR_DATAW *PVMDNS_PTR_DATAW;
typedef struct _VMDNS_PTR_DATAA {
PDNS_STRING pNameHost;
} VMDNS_PTR_DATAA;
typedef VMDNS_PTR_DATAA *PVMDNS_PTR_DATAA;
typedef struct _VMDNS_NS_DATAA {
PWDNS_STRING pwszHostname;
} VMDNS_NS_DATAW;
typedef VMDNS_NS_DATAW *PVMDNS_NS_DATAW;
typedef struct _VMDNS_SOA_DATAW {
PWDNS_STRING pNamePrimaryServer;
PWDNS_STRING pNameAdministrator;
DWORD dwSerialNo;
DWORD dwRefresh;
DWORD dwRetry;
DWORD dwExpire;
DWORD dwDefaultTtl;
} VMDNS_SOA_DATAW;
typedef VMDNS_SOA_DATAW *PVMDNS_SOA_DATAW;
typedef struct VMDNS_SOA_DATAA {
PDNS_STRING pNamePrimaryServer;
PDNS_STRING pNameAdministrator;
DWORD dwSerialNo;
DWORD dwRefresh;
DWORD dwRetry;
DWORD dwExpire;
DWORD dwDefaultTtl;
} VMDNS_SOA_DATAA;
typedef VMDNS_SOA_DATAA *PVMDNS_SOA_DATAA;
typedef struct _VMDNS_MINFO_DATAW {
PWDNS_STRING pNameMailbox;
PWDNS_STRING pNameErrorsMailbox;
} VMDNS_MINFO_DATAW;
typedef VMDNS_MINFO_DATAW *PVMDNS_MINFO_DATAW;
typedef struct _VMDNS_MINFO_DATAA {
PDNS_STRING pNameMailbox;
PDNS_STRING pNameErrorsMailbox;
} VMDNS_MINFO_DATAA;
typedef VMDNS_MINFO_DATAA *PVMDNS_MINFO_DATAA;
typedef struct _VMDNS_MX_DATAW {
PWDNS_STRING pNameExchange;
WORD wPreference;
WORD Pad;
} VMDNS_MX_DATAW;
typedef VMDNS_MX_DATAW *PVMDNS_MX_DATAW;
typedef struct _VMDNS_MX_DATAA {
PDNS_STRING pNameExchange;
WORD wPreference;
WORD Pad;
} VMDNS_MX_DATAA;
typedef VMDNS_MX_DATAA *PVMDNS_MX_DATAA;
typedef struct _VMDNS_TXT_DATAW {
DWORD dwStringCount;
PWDNS_STRING pStringArray[1];
} VMDNS_TXT_DATAW;
typedef VMDNS_TXT_DATAW *PVMDNS_TXT_DATAW;
typedef struct _VMDNS_TXT_DATAA {
DWORD dwStringCount;
PDNS_STRING pStringArray[1];
} VMDNS_TXT_DATAA;
typedef VMDNS_TXT_DATAA *PVMDNS_TXT_DATAA;
typedef struct _VMDNS_NULL_DATA {
DWORD dwByteCount;
BYTE Data[1];
} VMDNS_NULL_DATA;
typedef VMDNS_NULL_DATA *PVMDNS_NULL_DATA;
typedef struct _VMDNS_WKS_DATA {
VMDNS_IP4_ADDRESS IpAddress;
UCHAR chProtocol;
BYTE BitMask[1];
} VMDNS_WKS_DATA;
typedef VMDNS_WKS_DATA *PVMDNS_WKS_DATA;
typedef struct _VMDNS_AAAA_DATA {
VMDNS_IP6_ADDRESS Ip6Address;
} VMDNS_AAAA_DATA;
typedef VMDNS_AAAA_DATA *PVMDNS_AAAA_DATA;
typedef struct _VMDNS_SIG_DATAW {
WORD wTypeCovered;
BYTE chAlgorithm;
BYTE chLabelCount;
DWORD dwOriginalTtl;
DWORD dwExpiration;
DWORD dwTimeSigned;
WORD wKeyTag;
WORD wSignatureLength;
PWDNS_STRING pNameSigner;
BYTE Signature[1];
} VMDNS_SIG_DATAW;
typedef VMDNS_SIG_DATAW *PVMDNS_SIG_DATAW;
typedef VMDNS_SIG_DATAW VMDNS_RRSIG_DATAW;
typedef VMDNS_SIG_DATAW *PVMDNS_RRSIG_DATAW;
typedef struct _VMDNS_SIG_DATAA {
WORD wTypeCovered;
BYTE chAlgorithm;
BYTE chLabelCount;
DWORD dwOriginalTtl;
DWORD dwExpiration;
DWORD dwTimeSigned;
WORD wKeyTag;
WORD wSignatureLength;
PDNS_STRING pNameSigner;
BYTE Signature[1];
} VMDNS_SIG_DATAA;
typedef VMDNS_SIG_DATAA *PVMDNS_SIG_DATAA;
typedef VMDNS_SIG_DATAA VMDNS_RRSIG_DATAA;
typedef VMDNS_SIG_DATAA *PVMDNS_RRSIG_DATAA;
typedef struct _VMDNS_KEY_DATA {
WORD wFlags;
BYTE chProtocol;
BYTE chAlgorithm;
WORD wKeyLength;
WORD wPad;
BYTE Key[1];
} VMDNS_KEY_DATA;
typedef VMDNS_KEY_DATA *PVMDNS_KEY_DATA;
typedef VMDNS_KEY_DATA VMDNS_DNSKEY_DATA;
typedef VMDNS_KEY_DATA *PVMDNS_DNSKEY_DATA;
typedef struct _VMDNS_DHCID_DATA {
DWORD dwByteCount;
BYTE DHCID[1];
} VMDNS_DHCID_DATA;
typedef VMDNS_DHCID_DATA *PVMDNS_DHCID_DATA;
typedef struct _VMDNS_NSEC_DATAW {
PWDNS_STRING pNextDomainName;
WORD wTypeBitMapsLength;
WORD wPad;
BYTE TypeBitMaps[1];
} VMDNS_NSEC_DATAW;
typedef VMDNS_NSEC_DATAW *PVMDNS_NSEC_DATAW;
typedef struct VMDNS_NSEC_DATAA {
PDNS_STRING pNextDomainName;
WORD wTypeBitMapsLength;
WORD wPad;
BYTE TypeBitMaps[1];
} VMDNS_NSEC_DATAA;
typedef VMDNS_NSEC_DATAA *PVMDNS_NSEC_DATAA;
typedef struct _VMDNS_NSEC3_DATA {
BYTE chAlgorithm;
BYTE bFlags;
WORD wIterations;
BYTE bSaltLength;
BYTE bHashLength;
WORD wTypeBitMapsLength;
BYTE chData[1];
} VMDNS_NSEC3_DATA;
typedef VMDNS_NSEC3_DATA *PVMDNS_NSEC3_DATA;
typedef struct _VMDNS_NSEC3PARAM_DATA {
BYTE chAlgorithm;
BYTE bFlags;
WORD wIterations;
BYTE bSaltLength;
BYTE bPad[3];
BYTE pbSalt[1];
} VMDNS_NSEC3PARAM_DATA;
typedef VMDNS_NSEC3PARAM_DATA *PVMDNS_NSEC3PARAM_DATA;
typedef struct _VMDNS_DS_DATA {
WORD wKeyTag;
BYTE chAlgorithm;
BYTE chDigestType;
WORD wDigestLength;
WORD wPad;
BYTE Digest[1];
} VMDNS_DS_DATA;
typedef VMDNS_DS_DATA *PVMDNS_DS_DATA;
typedef struct  {
WORD wDataLength;
WORD wPad;
BYTE Data[1];
} VMDNS_OPT_DATA;
typedef VMDNS_OPT_DATA *PVMDNS_OPT_DATA;
typedef struct  {
WORD wVersion;
WORD wSize;
WORD wHorPrec;
WORD wVerPrec;
DWORD dwLatitude;
DWORD dwLongitude;
DWORD dwAltitude;
} VMDNS_LOC_DATA;
typedef VMDNS_LOC_DATA *PVMDNS_LOC_DATA;
typedef struct  {
PWDNS_STRING pNameNext;
WORD wNumTypes;
WORD wTypes[1];
} VMDNS_NXT_DATAW;
typedef VMDNS_NXT_DATAW *PVMDNS_NXT_DATAW;
typedef struct  {
PDNS_STRING pNameNext;
WORD wNumTypes;
WORD wTypes[1];
} VMDNS_NXT_DATAA;
typedef VMDNS_NXT_DATAA *PVMDNS_NXT_DATAA;
typedef struct  {
PWDNS_STRING pNameTarget;
WORD wPriority;
WORD wWeight;
WORD wPort;
WORD Pad;
} VMDNS_SRV_DATAW;
typedef VMDNS_SRV_DATAW *PVMDNS_SRV_DATAW;
typedef struct  {
PDNS_STRING pNameTarget;
WORD wPriority;
WORD wWeight;
WORD wPort;
WORD Pad;
} VMDNS_SRV_DATAA;
typedef VMDNS_SRV_DATAA *PVMDNS_SRV_DATAA;
typedef struct  {
WORD wOrder;
WORD wPreference;
PWDNS_STRING pFlags;
PWDNS_STRING pService;
PWDNS_STRING pRegularExpression;
PWDNS_STRING pReplacement;
} VMDNS_NAPTR_DATAW;
typedef VMDNS_NAPTR_DATAW *PVMDNS_NAPTR_DATAW;
typedef struct  {
WORD wOrder;
WORD wPreference;
PDNS_STRING pFlags;
PDNS_STRING pService;
PDNS_STRING pRegularExpression;
PDNS_STRING pReplacement;
} VMDNS_NAPTR_DATAA;
typedef VMDNS_NAPTR_DATAA *PVMDNS_NAPTR_DATAA;
typedef struct  {
PWDNS_STRING pNameAlgorithm;
PVMDNS_BLOB pKey;
PVMDNS_BLOB pOtherData;
DWORD dwCreateTime;
DWORD dwExpireTime;
WORD wMode;
WORD wError;
} VMDNS_TKEY_DATAW;
typedef VMDNS_TKEY_DATAW *PVMDNS_TKEY_DATAW;
typedef struct  {
PDNS_STRING pNameAlgorithm;
PVMDNS_BLOB pKey;
PVMDNS_BLOB pOtherData;
DWORD dwCreateTime;
DWORD dwExpireTime;
WORD wMode;
WORD wError;
} VMDNS_TKEY_DATAA;
typedef VMDNS_TKEY_DATAA *PVMDNS_TKEY_DATAA;
typedef struct  {
PWDNS_STRING pNameAlgorithm;
PVMDNS_BLOB pSignature;
PVMDNS_BLOB pOtherData;
UINT64 unCreateTime;
WORD wFudgeTime;
WORD wOriginalXid;
WORD wError;
PBYTE pRawTsigPtr;
} VMDNS_TSIG_DATAW;
typedef VMDNS_TSIG_DATAW *PVMDNS_TSIG_DATAW;
typedef struct  {
PDNS_STRING pNameAlgorithm;
PVMDNS_BLOB pSignature;
PVMDNS_BLOB pOtherData;
UINT64 unCreateTime;
WORD wFudgeTime;
WORD wOriginalXid;
WORD wError;
PBYTE pRawTsigPtr;
} VMDNS_TSIG_DATAA;
typedef VMDNS_TSIG_DATAA *PVMDNS_TSIG_DATAA;
typedef union _VMDNS_RECORD_DATA {
/* case(s): 1 */
VMDNS_A_DATA A;
/* case(s): 28 */
VMDNS_AAAA_DATA AAAA;
/* case(s): 2 */
VMDNS_PTR_DATAA NS;
/* case(s): 12 */
VMDNS_PTR_DATAA PTR;
/* case(s): 5 */
VMDNS_PTR_DATAA CNAME;
/* case(s): 6 */
VMDNS_SOA_DATAA SOA;
/* case(s): 33 */
VMDNS_SRV_DATAA SRV;
/* case(s): 249 */
VMDNS_TKEY_DATAA TKEY;
/* case(s): 250 */
VMDNS_TSIG_DATAA TSIG;
} VMDNS_RECORD_DATA;
typedef VMDNS_RECORD_DATA *PVMDNS_RECORD_DATA;
typedef struct _VMDNS_RECORD {
PDNS_STRING pszName;
VMDNS_RR_TYPE dwType;
VMDNS_CLASS iClass;
VMDNS_TTL dwTtl;
VMDNS_RECORD_DATA Data;
} VMDNS_RECORD;
typedef VMDNS_RECORD *PVMDNS_RECORD;
typedef struct _VMDNS_RECORD_ARRAY {
DWORD dwCount;
PVMDNS_RECORD Records;
} VMDNS_RECORD_ARRAY;
typedef VMDNS_RECORD_ARRAY *PVMDNS_RECORD_ARRAY;
typedef struct _VMDNS_ZONE_INFO {
PDNS_STRING pszName;
PDNS_STRING pszPrimaryDnsSrvName;
PDNS_STRING pszRName;
UINT32 serial;
UINT32 refreshInterval;
UINT32 retryInterval;
UINT32 expire;
UINT32 minimum;
VMDNS_ZONE_FLAGS dwFlags;
VMDNS_ZONE_TYPE dwZoneType;
} VMDNS_ZONE_INFO;
typedef VMDNS_ZONE_INFO *PVMDNS_ZONE_INFO;
typedef struct _VMDNS_ZONE_INFO_ARRAY {
DWORD dwCount;
PVMDNS_ZONE_INFO ZoneInfos;
} VMDNS_ZONE_INFO_ARRAY;
typedef VMDNS_ZONE_INFO_ARRAY *PVMDNS_ZONE_INFO_ARRAY;
typedef struct _PVMDNS_FORWARDERS {
UINT32 dwCount;
PDNS_STRING *ppszName;
} VMDNS_FORWARDERS;
typedef VMDNS_FORWARDERS *PVMDNS_FORWARDERS;
typedef struct _VMDNS_IP4_ADDRESS_ARRAY {
DWORD dwCount;
VMDNS_IP4_ADDRESS *Addrs;
} VMDNS_IP4_ADDRESS_ARRAY;
typedef VMDNS_IP4_ADDRESS_ARRAY *PVMDNS_IP4_ADDRESS_ARRAY;
typedef struct _VMDNS_IP6_ADDRESS_ARRAY {
DWORD dwCount;
PVMDNS_IP6_ADDRESS Addrs;
} VMDNS_IP6_ADDRESS_ARRAY;
typedef VMDNS_IP6_ADDRESS_ARRAY *PVMDNS_IP6_ADDRESS_ARRAY;
typedef struct _VMDNS_INIT_INFO {
PSTR pszDomain;
PSTR pszDcSrvName;
VMDNS_IP4_ADDRESS_ARRAY IpV4Addrs;
VMDNS_IP6_ADDRESS_ARRAY IpV6Addrs;
WORD wPriority;
WORD wWeight;
WORD wPort;
WORD wPad;
} VMDNS_INIT_INFO;
typedef VMDNS_INIT_INFO *PVMDNS_INIT_INFO;

#endif
extern UINT32 VmDnsRpcInitialize(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PVMDNS_INIT_INFO pInitInfo
#endif
);
extern UINT32 VmDnsRpcUninitialize(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PVMDNS_INIT_INFO pInitInfo
#endif
);
extern UINT32 VmDnsRpcCreateZone(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PVMDNS_ZONE_INFO pZoneInfo
#endif
);
extern UINT32 VmDnsRpcUpdateZone(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PVMDNS_ZONE_INFO pZoneInfo
#endif
);
extern UINT32 VmDnsRpcDeleteZone(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszZone
#endif
);
extern UINT32 VmDnsRpcAddRecord(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszZone,
    /* [in] */ PVMDNS_RECORD pRecord
#endif
);
extern UINT32 VmDnsRpcDeleteRecord(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszZone,
    /* [in] */ PVMDNS_RECORD pRecord
#endif
);
extern UINT32 VmDnsRpcQueryRecords(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszZone,
    /* [in] */ PDNS_STRING pszName,
    /* [in] */ VMDNS_RR_TYPE dwType,
    /* [in] */ DWORD dwOptions,
    /* [out] */ PVMDNS_RECORD_ARRAY *ppRecordArray
#endif
);
extern UINT32 VmDnsRpcListZones(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [out] */ PVMDNS_ZONE_INFO_ARRAY *ppZoneArray
#endif
);
extern UINT32 VmDnsRpcListRecords(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszZone,
    /* [out] */ PVMDNS_RECORD_ARRAY *ppRecordArray
#endif
);
extern UINT32 VmDnsRpcAddForwarder(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszForwarder
#endif
);
extern UINT32 VmDnsRpcDeleteForwarder(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszForwarder
#endif
);
extern UINT32 VmDnsRpcGetForwarders(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [out] */ PVMDNS_FORWARDERS *ppDnsForwarders
#endif
);
typedef struct vmdns_v1_0_epv_t {
	UINT32 (*VmDnsRpcInitialize)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PVMDNS_INIT_INFO pInitInfo
#endif
);
	UINT32 (*VmDnsRpcUninitialize)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PVMDNS_INIT_INFO pInitInfo
#endif
);
	UINT32 (*VmDnsRpcCreateZone)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PVMDNS_ZONE_INFO pZoneInfo
#endif
);
	UINT32 (*VmDnsRpcUpdateZone)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PVMDNS_ZONE_INFO pZoneInfo
#endif
);
	UINT32 (*VmDnsRpcDeleteZone)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszZone
#endif
);
	UINT32 (*VmDnsRpcAddRecord)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszZone,
    /* [in] */ PVMDNS_RECORD pRecord
#endif
);
	UINT32 (*VmDnsRpcDeleteRecord)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszZone,
    /* [in] */ PVMDNS_RECORD pRecord
#endif
);
	UINT32 (*VmDnsRpcQueryRecords)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszZone,
    /* [in] */ PDNS_STRING pszName,
    /* [in] */ VMDNS_RR_TYPE dwType,
    /* [in] */ DWORD dwOptions,
    /* [out] */ PVMDNS_RECORD_ARRAY *ppRecordArray
#endif
);
	UINT32 (*VmDnsRpcListZones)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [out] */ PVMDNS_ZONE_INFO_ARRAY *ppZoneArray
#endif
);
	UINT32 (*VmDnsRpcListRecords)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszZone,
    /* [out] */ PVMDNS_RECORD_ARRAY *ppRecordArray
#endif
);
	UINT32 (*VmDnsRpcAddForwarder)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszForwarder
#endif
);
	UINT32 (*VmDnsRpcDeleteForwarder)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [in] */ PDNS_STRING pszForwarder
#endif
);
	UINT32 (*VmDnsRpcGetForwarders)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t hBinding,
    /* [out] */ PVMDNS_FORWARDERS *ppDnsForwarders
#endif
);
} vmdns_v1_0_epv_t;
extern rpc_if_handle_t vmdns_v1_0_c_ifspec;
extern rpc_if_handle_t vmdns_v1_0_s_ifspec;

#ifdef __cplusplus
    }
#endif

#endif
